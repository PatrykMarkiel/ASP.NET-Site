@using WebApplication3.Models.ViewModel;
@model HomeViewModel;
@{
    ViewData["Title"] = "Home Page";
}

@if (User.Identity.IsAuthenticated)
{
    <script>
        @{
            double minValue = 80;
            double maxValue = 100;
            double step = 5;
            var yValues = new List<double>();
            for (double i = minValue; i <= maxValue; i += step)
            {
                yValues.Add(i);
            }

            var viewModelWeight = new List<double> { 90, 90, 91, 93, 91, 93, 92, 90, 89, 86, 87, 88 };

            var chartValues = viewModelWeight.Where(v => v >= minValue && v <= maxValue).ToList();
        }
    </script>
    <div class="container">
        <br>
        <div>
            <div class="my-5 p-4 bg-light text-white center">
                <canvas id="myChart" style="width:100%;max-width:600px"></canvas>
                <script>
                                    const minValue = @minValue;
                    const maxValue = @maxValue;
                    const yValues = @Html.Raw(Json.Serialize(yValues));
                    const xValues = yValues.map((_, index) => ""); 
                    const chartValues = @Html.Raw(Json.Serialize(chartValues));

                    new Chart("myChart", {
                        type: "line",
                        data: {
                            labels: xValues,
                            datasets: [{
                                fill: false,
                                lineTension: 0.5,
                                backgroundColor: "rgba(0,0,255,1.0)",
                                borderColor: "rgba(0,0,255,0.1)",
                                data: chartValues // Ustawienie danych z viewModel.Weight w zakresie od 80 do 100 na wykresie
                            }]
                        },
                        options: {
                            legend: { display: false },
                            scales: {
                                yAxes: [{
                                    ticks: {
                                        min: minValue,
                                        max: maxValue,
                                        stepSize: @step // Krok między wartościami na osi Y
                                                    }
                                }],
                                xAxes: [{
                                    display: false // Ukrycie osi X
                                }]
                            }
                        }
                    });
                </script>

            </div>
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="my-2 p-3 bg-danger text-white text-center">Div 2</div>
            </div>
            <div class="col-md-4">
                <div class="my-2 p-3 bg-danger text-white text-center">Div 3</div>
            </div>
            <div class="col-md-4">
                <div class="my-2 p-3 bg-danger text-white text-center">Div 4</div>
            </div>
        </div>

        <div class="row justify-content-center">
            <div class="col-md-4">
                <div class="my-2 p-3 bg-secondary text-white text-center">Div 5</div>
            </div>
            <div class="col-md-4">
                <div class="my-2 p-3 bg-secondary text-white text-center">Div 6</div>
            </div>
        </div>
    </div>
}
else
{
    <p>
        <div class="row">
            <div class="col-12">
                <div class="my-5 p-4 bg-secondary text-white text-center">Login to do test or check your data</div>
            </div>
        </div>
    </p>
}
